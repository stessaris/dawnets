#!/usr/bin/env python

import sys
import textwrap
from ruamel.yaml import YAML
from pprint import pprint
from textx.metamodel import metamodel_from_str, metamodel_from_file
from textx.exceptions import TextXError

grammar = textwrap.dedent(
    r"""
    Graph:
        statements*=Statement ;

    Statement:
        Place | Transition | Arc | Domain | Variable | Skip
    ;

    Place: 'place' '(' name=ID ')' '.' ;
    Transition: 'transition' '(' name=ID ')' '.' ;
    Arc: 'arc' '(' fromN=ID ',' toN=ID ')' '.' ;
    Variable: 'variable' '(' name=ID ')' '.' ;
    Domain: 'set' '(' var=ID ',' tran=ID ',' value=VALUE ')' '.' ;
    Skip: /^.*$/ ;

    VALUE: /\w+\b/ ;

    Comment:
    /%.*$/
    ;
    """)

dawnetbc_mm = metamodel_from_str(grammar)
# dawnetbc_mm = metamodel_from_file('grammar.tx')


debugTextX = False


def main():
    dawnet = {}
    transitions = {}
    dawnet['transitions'] = transitions

    try:
        if len(sys.argv) > 1:
            dawnetbc = dawnetbc_mm.model_from_file(sys.argv[1], debug=debugTextX)
        else:
            dawnetbc = dawnetbc_mm.model_from_str(sys.stdin.read(), debug=debugTextX)
        print("Model OK.")
    except TextXError as e:
        print("Error in model file.")
        print(e)
        sys.exit(1)

    trans_statements = (s for s in dawnetbc.statements if type(s).__name__ == 'Transition')
    for s in trans_statements:
        transitions[s.name] = {'inflows': [], 'outflows': []}
    
    for s in dawnetbc.statements:
        if type(s).__name__ == 'Arc':
            if s.toN in transitions:
                transitions[s.toN]['inflows'].append(s.fromN)
            if s.fromN in transitions:
                transitions[s.fromN]['outflows'].append(s.toN)
        elif type(s).__name__ == 'Domain':
            if s.tran not in transitions:
                transitions[s.tran] = {}
            if 'updates' not in transitions[s.tran]:
                transitions[s.tran]['updates'] = { }
            updates = transitions[s.tran]['updates']
            if s.var in updates:
                updates[s.var].append(s.value)
            else:
                updates[s.var] = [s.value]

    pprint(dawnetbc.statements)
    YAML.dump(dawnet, sys.stdout)


if __name__ == '__main__':
    main()